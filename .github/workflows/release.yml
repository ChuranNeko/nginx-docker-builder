name: Release Nginx Build

on:
  push:
    tags:
      - 'v*'  # 当推送带v开头的tag时触发

env:
  DEBIAN_VERSIONS: "bookworm bullseye buster"  # 支持的 Debian 版本
  NGINX_VERSION: ${{ github.ref_name }}  # 使用 tag 名称作为 Nginx 版本号

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debian_version: ['bookworm', 'bullseye', 'buster']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Build Nginx
        env:
          DEBIAN_VERSION: ${{ matrix.debian_version }}
          NGINX_VERSION: ${{ github.ref_name }}
        run: |
          # 显示工作目录内容
          echo "Current directory contents:"
          ls -la
          
          # 显示 docker-compose.yml 内容
          echo "docker-compose.yml contents:"
          cat docker-compose.yml
          
          # 处理版本号
          NGINX_VERSION=${NGINX_VERSION#v}  # 移除版本号前的'v'
          # 验证下载 URL
          NGINX_URL="https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz"
          echo "Checking Nginx download URL: ${NGINX_URL}"
          if curl -I "${NGINX_URL}" 2>&1 | grep -q "200 OK"; then
            echo "Nginx version ${NGINX_VERSION} is available at ${NGINX_URL}"
          else
            echo "Error: Nginx version ${NGINX_VERSION} not found at ${NGINX_URL}"
            exit 1
          fi
          
          echo "Building Nginx version ${NGINX_VERSION} for Debian ${DEBIAN_VERSION}"
          
          # 使用环境变量文件
          echo "DEBIAN_VERSION=${DEBIAN_VERSION}" > .env
          echo "NGINX_VERSION=${NGINX_VERSION}" >> .env
          
          # 显示构建环境
          echo "Environment variables:"
          cat .env
          
          # 显示 Docker 信息
          echo "Docker version:"
          docker --version
          echo "Docker Compose version:"
          docker compose version
          
          # 构建镜像
          echo "Building Docker image..."
          docker compose --env-file .env build nginx-builder
          
          # 运行构建
          echo "Running builder..."
          docker compose --env-file .env run --rm nginx-builder
          
          # 检查输出目录
          echo "Checking output directory..."
          mkdir -p output
          ls -la output/
          
          # 创建压缩包
          echo "Creating tarball..."
          tar -czf nginx-${NGINX_VERSION}-debian-${DEBIAN_VERSION}.tar.gz -C output . || {
            echo "Error: tar command failed"
            echo "Output directory contents:"
            ls -la output/
            exit 1
          }
          
          # 清理镜像
          echo "Cleaning up..."
          docker rmi nginx-builder:${NGINX_VERSION}-${DEBIAN_VERSION} || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nginx-debian-${{ matrix.debian_version }}
          path: nginx-*.tar.gz

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            nginx-debian-*/nginx-*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true